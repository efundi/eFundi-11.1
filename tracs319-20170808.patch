diff --git a/entitybroker/core-providers/pom.xml b/entitybroker/core-providers/pom.xml
index 38ebd51..ef1c2ef 100644
--- a/entitybroker/core-providers/pom.xml
+++ b/entitybroker/core-providers/pom.xml
@@ -70,7 +70,14 @@
             <version>1.9.0</version>
             <scope>test</scope>
         </dependency>
-
+        <dependency>
+            <groupId>commons-fileupload</groupId>
+            <artifactId>commons-fileupload</artifactId>
+        </dependency>
+        <dependency>
+            <groupId>commons-lang</groupId>
+            <artifactId>commons-lang</artifactId>
+        </dependency>
         <!-- Sakai K1 dependencies -->
 <!-- -->
         <dependency>
diff --git a/entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/SiteEntityProvider.java b/entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/SiteEntityProvider.java
index 0b0e4b5..9d9a893 100644
--- a/entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/SiteEntityProvider.java
+++ b/entitybroker/core-providers/src/java/org/sakaiproject/entitybroker/providers/SiteEntityProvider.java
@@ -20,6 +20,16 @@
 
 package org.sakaiproject.entitybroker.providers;
 
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.InputStream;
+import java.io.OutputStream;
+
+import org.apache.commons.codec.binary.Base64;
+import org.apache.commons.fileupload.disk.DiskFileItem;
+import org.apache.commons.fileupload.disk.DiskFileItemFactory;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -43,6 +53,11 @@ import org.sakaiproject.authz.api.Role;
 import org.sakaiproject.authz.api.RoleAlreadyDefinedException;
 import org.sakaiproject.authz.api.SecurityService;
 import org.sakaiproject.component.api.ServerConfigurationService;
+import org.apache.commons.lang.StringUtils;
+import org.apache.commons.fileupload.disk.DiskFileItem;
+import org.sakaiproject.content.api.ContentCollectionEdit;
+import org.sakaiproject.content.api.ContentHostingService;
+import org.sakaiproject.content.api.ContentResource;
 import org.sakaiproject.component.cover.ComponentManager;
 import org.sakaiproject.entity.api.ResourceProperties;
 import org.sakaiproject.entity.api.ResourcePropertiesEdit;
@@ -133,6 +148,11 @@ RESTful, ActionsExecutable, Redirectable, RequestStorable, DepthLimitable {
         this.securityService = securityService;
     }
 
+    private ContentHostingService contentHostingService;
+    public void setContentHostingService(ContentHostingService contentHostingService) {
+        this.contentHostingService = contentHostingService;
+    }
+
     public static String PREFIX = "site";
     public String getEntityPrefix() {
         return PREFIX;
@@ -1199,4 +1219,231 @@ RESTful, ActionsExecutable, Redirectable, RequestStorable, DepthLimitable {
 	//	}
 	//	return null;
     }
+
+    @EntityCustomAction(action = "createProjectSite", viewKey = "")
+    public String createProjectSite(EntityView view, Map<String, Object> params) {
+        // expects site/createProjectSite
+        if (!developerHelperService.isUserAdmin(developerHelperService.getCurrentUserId())) {
+            throw new SecurityException("Permission denied. Must be super user to create a new Course Site");
+        }
+        if (!params.containsKey("siteid")) {
+            throw new IllegalArgumentException("Must include a 'siteid' in order to create a new Course Site.");
+        }
+        String siteid = (String) params.get("siteid");
+        Site site = null;
+        String createdSiteId = null;
+        try {
+            String title;
+            if (params.containsKey("title")){
+                title = (String) params.get("title");
+            } else{
+                title = siteid;
+            }
+            
+            site = siteService.addSite(siteid, "project");
+            site.setTitle(title);
+            site.setDescription((String) params.get("description"));
+            site.setShortDescription((String) params.get("shortdesc"));
+            site.setPublished(true);
+
+            //Overview
+            SitePage page = site.addPage();
+            page.setTitle("Overview");
+            page.setLayout(1);
+            page.addTool("sakai.iframe.site").setLayoutHints("0,0");
+            page.addTool("sakai.synoptic.announcement").setLayoutHints("0,1");
+            page.addTool("sakai.synoptic.messagecenter").setLayoutHints("1,1");
+
+            //Announcements
+            page = site.addPage();
+            page.setTitle("Announcements");
+            page.addTool("sakai.announcements");
+
+            //Resources
+            page = site.addPage();
+            page.setTitle("Resources");
+            page.addTool("sakai.resources");
+
+            //Lessons
+            page = site.addPage();
+            page.setTitle("Lessons");
+            page.addTool("sakai.lessonbuildertool");
+
+            //Site Info
+            page = site.addPage();
+            page.setTitle("Site Info");
+            page.addTool("sakai.siteinfo");
+
+            siteService.save(site);
+            createdSiteId = site.getId();
+        } catch (IdInvalidException e) {
+            try {
+                siteService.removeSite(site);
+            } catch (Exception e1) {
+                log.warn("Could not cleanup site on create failure: " + e1); // BLANK
+            }
+            throw new IllegalArgumentException("Cannot create site with given id: " + createdSiteId
+                    + ":" + e.getMessage() + ". Invalid id", e);
+        } catch (IdUsedException e) {
+            try {
+                siteService.removeSite(site);
+            } catch (Exception e1) {
+                log.warn("Could not cleanup site on create failure: " + e1); // BLANK
+            }
+            throw new IllegalArgumentException("Cannot create site with given id: " + createdSiteId
+                    + ":" + e.getMessage() + ". Id already in use.", e);
+        } catch (PermissionException e) {
+            try {
+                siteService.removeSite(site);
+            } catch (Exception e1) {
+                log.warn("Could not cleanup site on create failure: " + e1); // BLANK
+            }
+            throw new SecurityException(
+                    "Current user does not have permissions to create site: " + siteid + ":"
+                    + e.getMessage(), e);
+        } catch (IdUnusedException e) {
+            try {
+                siteService.removeSite(site);
+            } catch (Exception e1) {
+                log.warn("Could not cleanup site on create failure: " + e1); // BLANK
+            }
+            throw new IllegalArgumentException("Cannot save new site with given id: " + createdSiteId
+                    + ":" + e.getMessage(), e);
+        }
+        return createdSiteId;
+    }
+
+    /**
+     * content/siteId
+     */
+    @EntityCustomAction(action = "content", viewKey = "")
+    public String addSiteResource(EntityView view, Map<String, Object> params) {
+
+        String siteId = view.getPathSegment(2);
+        // check siteId supplied, mandatory value
+        if (StringUtils.isBlank(siteId)) {
+            throw new IllegalArgumentException(
+                    "siteId must be set in order to POST content to a site, via the URL /site/content/siteId");
+        }
+
+        // check resourceFile supplied, mandatory
+        DiskFileItem resourceFile = null;
+        if(params.get("resourceFile").getClass().equals(String.class)){
+           byte[] ba = Base64.decodeBase64((String) params.get("resourceFile"));
+           FileOutputStream fos;
+           File tempFile = null;
+           try {
+               tempFile = File.createTempFile(params.get("fileName").toString(), "."+ params.get("extension").toString(), null);
+               fos = new FileOutputStream(tempFile);
+               fos.write(ba);
+           } catch (Exception e) {
+               // TODO Auto-generated catch block
+               e.printStackTrace();
+           }
+           try
+           {
+               DiskFileItem fileItem = (DiskFileItem) new DiskFileItemFactory().createItem("fileData", params.get("contentType").toString(), true, params.get("fileName").toString());
+               InputStream input =  new FileInputStream(tempFile);
+               OutputStream os = fileItem.getOutputStream();
+               int ret = input.read();
+               while ( ret != -1 )
+               {
+                   os.write(ret);
+                   ret = input.read();
+               }
+               os.flush();
+               resourceFile = fileItem;
+           }catch(Exception ex){
+               ex.printStackTrace();
+           }
+        }else{
+            resourceFile = (DiskFileItem) params.get("resourceFile");
+        }
+        if (resourceFile == null) {
+            throw new IllegalArgumentException(
+                    "resourceFile must be set in order to POST the resources to a site, via the URL /site/content/siteId");
+        }
+        String folderName = (String) params.get("folderName");
+        if (StringUtils.isBlank(folderName)) {
+            folderName = "StudyGuide";
+        }
+
+        String folderDescription = (String) params.get("folderDescription");
+        if (StringUtils.isBlank(folderDescription)) {
+            folderDescription = "StudyGuide Description";
+        }
+        String contentType = resourceFile.getContentType();
+        String resourceFilename = resourceFile.getName();
+
+        String siteCollectionId = contentHostingService.getSiteCollection(siteId);
+        String collectionId = "";
+
+        try {
+            try {
+                ContentCollectionEdit collection = contentHostingService.addCollection(siteCollectionId + folderName);
+                collectionId = collection.getId();
+
+                ResourcePropertiesEdit props = collection.getPropertiesEdit();
+                props.addProperty(ResourceProperties.PROP_DISPLAY_NAME,
+                        folderName.substring(folderName.lastIndexOf('/') + 1));
+                props.addProperty(ResourceProperties.PROP_HIDDEN_WITH_ACCESSIBLE_CONTENT, "true");
+                contentHostingService.commitCollection(collection);
+
+            } catch (IdUsedException e) {
+                collectionId = "/group/" + siteId + "/" + folderName + "/";
+            }
+
+            ResourcePropertiesEdit resourceProperties = contentHostingService.newResourceProperties();
+            resourceProperties.addProperty(ResourceProperties.PROP_DISPLAY_NAME, resourceFilename);
+            resourceProperties.addProperty(ResourceProperties.PROP_DESCRIPTION, resourceFilename);
+            String id = null;
+            try {
+
+                id = collectionId + resourceFilename;
+                ContentResource contentResource = contentHostingService.addResource(id, contentType,
+                        resourceFile.getInputStream(), resourceProperties, 1);
+                return contentResource.getId();
+            } catch (Exception e1) {
+                try {
+                    contentHostingService.removeResource(id);
+                } catch (Exception e2) {
+                    log.warn("Could not remove resource: " + id + ". Exception: " + e2);
+                }
+//             throw new IllegalArgumentException("Could not add resource: siteId: " + siteId + "; resourceFileame: "
+//                     + resourceFilename + " - " + e1.getMessage(), e1);
+            }
+        } catch (Exception e) {
+            throw new IllegalArgumentException("Could not add resource: siteId: " + siteId + "; resourceFileame: "
+                    + resourceFilename + " - " + e.getMessage(), e);
+        }
+        return "failure";
+    }
+
+    @EntityCustomAction(action = "contentDelete", viewKey = "")
+    public void deleteSiteResource(EntityView view, Map<String, Object> params) {
+        String siteId = view.getPathSegment(2);
+        // check siteId supplied, mandatory value
+        if (StringUtils.isBlank(siteId)) {
+            throw new IllegalArgumentException(
+                    "siteId must be set in order to DELETE content to a site, via the URL /site/content/siteId");
+        }
+
+        String resourceFilename = (String) params.get("fileName");
+        if (StringUtils.isBlank(resourceFilename)) {
+            resourceFilename = "FileName";
+        }
+
+        try {
+
+            String resourceId = (String) params.get("resourceId");
+            if (StringUtils.isBlank(resourceId)) {
+                throw new Exception("Invalid ResourceId");
+            }
+
+            contentHostingService.removeResource(resourceId);
+        } catch (Exception e) {
+            throw new IllegalArgumentException("Could not delete resource: siteId: " + siteId + "; resourceFileame: "
+                    + resourceFilename + " - " + e.getMessage(), e);
+        }
+    }
 }
diff --git a/entitybroker/core-providers/src/java/site.properties b/entitybroker/core-providers/src/java/site.properties
index 83225ec..562ab53 100644
--- a/entitybroker/core-providers/src/java/site.properties
+++ b/entitybroker/core-providers/src/java/site.properties
@@ -37,5 +37,16 @@ site.action.pages = Allows retrieval of all pages and tools in a site, \
 use "props" (true/false, default false) to include page properties, \
 use "config" (true/false, default false) to include tool configurations
 site.action.withPerm=The URL for example, /site/withPerm/.json?permission=site.upd
+site.action.createProjectSite = Allows the Administrator to create a course sites by posting to the url /site/createProjectSite. <br />\
+This is done by passing a set of post parameters which will be used to create a course site. These parameters includes: <br />\
+use "siteid" (String, required) for actual Sakai site Id, <br />\
+use "title" for actual site title, <br />\
+use "description" for course site description, <br />\
+use "shortdesc" for course site short description <br />\
+Default tool that will be added includes Home, Announcements, Resources and Site Info.
+site.action.content = Posts content (resource file) to a given site. URL should be of the form /direct/content/SITEID.   <br />\
+resourceFile is a mandatory parameter field. folderName and folderDescription are optional parameter fields otherwise default values will be used for resource directory structure.
+site.action.contentDelete = Deletes content (resource file) from a given site. URL should be of the form /direct/contentDelete/SITEID.   <br />\
+resourceId is a mandatory parameter field.
 site.action.search = Retrieves a siteid that matches the Site title value send.  /site/search/[/:SITE_TITLE]  <br />\
 (GET) /direct/site/search/ - gets siteId for title query parameter. 
diff --git a/entitybroker/core-providers/src/webapp/WEB-INF/applicationContext.xml b/entitybroker/core-providers/src/webapp/WEB-INF/applicationContext.xml
index 7bfaf79..4f14b7d 100644
--- a/entitybroker/core-providers/src/webapp/WEB-INF/applicationContext.xml
+++ b/entitybroker/core-providers/src/webapp/WEB-INF/applicationContext.xml
@@ -20,6 +20,7 @@
 		<property name="functionManager" ref="org.sakaiproject.authz.api.FunctionManager" />
 		<property name="securityService" ref="org.sakaiproject.authz.api.SecurityService" />
         <property name="userEntityProvider" ref="org.sakaiproject.entitybroker.providers.UserEntityProvider" />
+        <property name="contentHostingService" ref="org.sakaiproject.content.api.ContentHostingService" />
         <property name="serverConfigurationService" ref="org.sakaiproject.component.api.ServerConfigurationService" />
         <property name="maxDepth" value="8"/>
     </bean>
